pipeline {
    parameters {
        booleanParam(name: 'autoApprove', defaultValue: false, description: 'Automatically run apply after generating plan?')
    } 
    environment {
        azure_subscription_id = credentials('azure_subscription_id')
        azure_client_id  = credentials('azure_client_id')
        azure_client_secret  = credentials('azure_client_secret')
        azure_tenant_id = credentials('azure_tenant_id')
    }

    agent any

    stages {
        stage('checkout') {
            steps {
                script {
                    dir("terraform") {
                        git "https://github.com/pranavkumarpk01/Terraform-.git"
                    }
                }
            }
        }

        stage('Plan') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'azure_credentials', usernameVariable: 'AZURE_USERNAME', passwordVariable: 'AZURE_PASSWORD')]) {
                    sh 'pwd;cd terraform/ ; terraform init'
                    sh 'pwd;cd terraform/ ; terraform plan -out tfplan'
                    sh 'pwd;cd terraform/ ; terraform show -no-color tfplan > tfplan.txt'
                }
            }
        }

        stage('Approval') {
            when {
                not {
                    equals expected: true, actual: params.autoApprove
                }
            }

            steps {
                script {
                    def plan = readFile 'terraform/tfplan.txt'
                    input message: "Do you want to apply the plan?",
                          parameters: [text(name: 'Plan', description: 'Please review the plan', defaultValue: plan)]
                }
            }
        }

        stage('Apply') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'azure_credentials', usernameVariable: 'AZURE_USERNAME', passwordVariable: 'AZURE_PASSWORD')]) {
                    sh 'cd terraform/ ; terraform apply -input=false tfplan'
                }
            }
        }
    }
    
    post {
        always {
            withCredentials([usernamePassword(credentialsId: 'azure_credentials', usernameVariable: 'AZURE_USERNAME', passwordVariable: 'AZURE_PASSWORD')]) {
                sh 'cd terraform/ ; terraform destroy -auto-approve'
            }
        }
    }
}
