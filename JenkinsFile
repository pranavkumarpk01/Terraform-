pipeline {
    agent any
    
    environment {
        AZURE_SUBSCRIPTION_ID = credentials('azure_subscription_id')
        AZURE_CLIENT_ID = credentials('azure_client_id')
        AZURE_CLIENT_SECRET = credentials('azure_client_secret')
        AZURE_TENANT_ID = credentials('azure_tenant_id')
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    withCredentials([string(credentialsId: 'azure_subscription_id', variable: 'AZURE_SUBSCRIPTION_ID'),
                                     string(credentialsId: 'azure_client_id', variable: 'AZURE_CLIENT_ID'),
                                     string(credentialsId: 'azure_client_secret', variable: 'AZURE_CLIENT_SECRET'),
                                     string(credentialsId: 'azure_tenant_id', variable: 'AZURE_TENANT_ID')]) {
                        dir("terraform") {
                            git "https://github.com/pranavkumarpk01/Terraform-.git"
                        }
                    }
                }
            }
        }

        stage('Plan') {
            steps {
                script {
                    withCredentials([string(credentialsId: 'azure_subscription_id', variable: 'AZURE_SUBSCRIPTION_ID'),
                                     string(credentialsId: 'azure_client_id', variable: 'AZURE_CLIENT_ID'),
                                     string(credentialsId: 'azure_client_secret', variable: 'AZURE_CLIENT_SECRET'),
                                     string(credentialsId: 'azure_tenant_id', variable: 'AZURE_TENANT_ID')]) {
                        sh 'cd terraform/ ; terraform init'
                        sh 'cd terraform/ ; terraform plan -out tfplan'
                        sh 'cd terraform/ ; terraform show -no-color tfplan > tfplan.txt'
                    }
                }
            }
        }

        stage('Approval') {
            when {
                not {
                    equals expected: true, actual: params.autoApprove
                }
            }

            steps {
                script {
                    def plan = readFile 'terraform/tfplan.txt'
                    input message: "Do you want to apply the plan?",
                          parameters: [text(name: 'Plan', description: 'Please review the plan', defaultValue: plan)]
                }
            }
        }

        stage('Apply') {
            steps {
                script {
                    withCredentials([string(credentialsId: 'azure_subscription_id', variable: 'AZURE_SUBSCRIPTION_ID'),
                                     string(credentialsId: 'azure_client_id', variable: 'AZURE_CLIENT_ID'),
                                     string(credentialsId: 'azure_client_secret', variable: 'AZURE_CLIENT_SECRET'),
                                     string(credentialsId: 'azure_tenant_id', variable: 'AZURE_TENANT_ID')]) {
                        sh 'cd terraform/ ; terraform apply -input=false tfplan'
                    }
                }
            }
        }
    }
    
    post {
        always {
            sh 'cd terraform/ ; terraform destroy -auto-approve'
        }
    }
}
